#DECISION TREE IRIS DATASET

#Importing neccessary libraries
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score,classification_report
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

#Loading the datset ( Iris dataset)
iris = load_iris()
X = iris.data  
y = iris.target  

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Decision Tree Classifier
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

# Predict on test data
y_pred = clf.predict(X_test)

#Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")
report=classification_report(y_test, y_pred)
print(report)

# Visualisation of Decision Tree
plt.figure(figsize=(11, 9))
plot_tree(clf, filled=True, feature_names=iris.feature_names, class_names=iris.target_names, rounded=True)
plt.show()

EXPLANATION:
Working:-
This Python code implements a Decision Tree Classifier using the Iris dataset, one of the most well-known datasets in machine learning. It begins by importing necessary libraries from scikit-learn and matplotlib for data handling, model training, and visualization. 
The Iris dataset is then loaded, which contains features of three types of flowers — Setosa, Versicolor, and Virginica — along with their corresponding labels. The dataset is split into training and testing sets using an 80-20 ratio.
A Decision Tree Classifier is initialized and trained on the training data. Once trained, the model makes predictions on the test set, and the accuracy is evaluated using accuracy_score and classification_report to show how well the model performs on unseen data. Finally, the code visually plots the structure of the trained decision tree using plot_tree(), which helps understand how the model makes decisions based on feature values

-You can replace the Iris dataset with any dataset of your choice by loading your custom dataset in place of load_iris() and updating the corresponding features (X) and labels (y) accordingly.
